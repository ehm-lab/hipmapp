mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
summarise(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X = first(X),
Y = first(Y),
.groups = 'drop') %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X = first(X),
Y = first(Y),
.groups = 'drop') %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
summarise(html_rows = generate_html_rows(Date, Time, Position, Age.Grade),
.groups = 'drop') %>%
mutate(pop_lbl = ifelse(n() > 0, assemble_html_table(html_rows), NA))
#TEST
# Generate HTML rows for each entry
generate_html_row <- function(Date, Time, Position, AgeGrade) {
paste0("<tr>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Date, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Time, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Position, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", AgeGrade, "</td>",
"</tr>")
}
# Function to assemble the HTML table with header
assemble_html_table <- function(html_rows) {
if(length(html_rows) == 0) return(NA)
header <- "<tr><th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Date</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Time</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Position</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Age.Grade</th></tr>"
full_table <- paste0("<table style='border-collapse: collapse;'>", header, html_rows, "</table>")
return(full_table)
}
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
pal <- leaflet::colorBin(palette="viridis", domain=mapdata$inSeconds, bins = 5, na.color="transparent" )
colors <- unique(pal(sort(mapdata$inSeconds)))
# get break values and turn to labels
vcuts <- levels(cut(mapdata$inSeconds, length(colors), include.lowest = FALSE, right = FALSE))
cutlabs <- paste0(gsub("\\[|\\]|\\(|\\)", "", vcuts),collapse=",") %>% strsplit(.,",") %>% unlist() %>%
unique(.) %>% as.numeric(.) %>% as.list(.) %>% lapply(.,to_hhmmss) %>% unlist(.)
labs <- paste(dplyr::lag(cutlabs),cutlabs,sep = " - ")[-1] # first has NA
map <-
leaflet(mapdata) %>%
addTiles() %>%
addCircleMarkers(lng = ~X, lat = ~Y,
popup = ~paste(n," race(s) at ",Event,"</br>",
ifelse(n==0,"",pop_lbl)),
label=~paste(Event),
stroke = ~funstroke(inSeconds), weight = 1,color = "black",
fillColor=~pal(inSeconds), fillOpacity = ~funfillop(inSeconds,0, 0.8)) %>%
addLegend(colors = colors, labels = labs, title="Avg. Time")
map
pal <- leaflet::colorFactor(palette="viridis", domain=mapdata$inSeconds, bins = 5, na.color="transparent" )
colors <- unique(pal(sort(mapdata$inSeconds)))
# get break values and turn to labels
vcuts <- levels(cut(mapdata$inSeconds, length(colors), include.lowest = FALSE, right = FALSE))
pal <- leaflet::colorFactor(palette="viridis", domain=mapdata$inSeconds,  na.color="transparent" )
colors <- unique(pal(sort(mapdata$inSeconds)))
# get break values and turn to labels
vcuts <- levels(cut(mapdata$inSeconds, length(colors), include.lowest = FALSE, right = FALSE))
cutlabs <- paste0(gsub("\\[|\\]|\\(|\\)", "", vcuts),collapse=",") %>% strsplit(.,",") %>% unlist() %>%
unique(.) %>% as.numeric(.) %>% as.list(.) %>% lapply(.,to_hhmmss) %>% unlist(.)
labs <- paste(dplyr::lag(cutlabs),cutlabs,sep = " - ")[-1] # first has NA
map <-
leaflet(mapdata) %>%
addTiles() %>%
addCircleMarkers(lng = ~X, lat = ~Y,
popup = ~paste(n," race(s) at ",Event,"</br>",
ifelse(n==0,"",pop_lbl)),
label=~paste(Event),
stroke = ~funstroke(inSeconds), weight = 1,color = "black",
fillColor=~pal(inSeconds), fillOpacity = ~funfillop(inSeconds,0, 0.8)) %>%
addLegend(colors = colors, labels = labs, title="Avg. Time")
map
pal <- leaflet::colorBins(palette="viridis", domain=mapdata$inSeconds, bins=5  na.color="transparent" )
pal <- leaflet::colorBins(palette="viridis", domain=mapdata$inSeconds, bins=5, na.color="transparent" )
# FUNCTIONS
# to hour minutes seconds readable label
to_hhmmss <- function(seconds) {
total_seconds <- round(seconds)
hours <- total_seconds %/% 3600
mins <- (total_seconds %% 3600) %/% 60
secs <- total_seconds %% 60
# if there are hour values use them
if (hours > 0) {
return(sprintf("%02d:%02d:%02d", hours, mins, secs))
} else {
return(sprintf("%02d:%02d", mins, secs))
}
}
# for transparency when ran 0 times
funfillop <- function(x,naop,op) {
ifelse(is.na(x), naop, op)
}
# for no stroke when ran >= 1 time
funstroke <- function(x) {
ifelse(is.na(x),TRUE,FALSE)
}
# for popup table rows
generate_html_row <- function(Date, Time, Position, AgeGrade) {
paste0("<tr>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Date, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Time, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Position, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", AgeGrade, "</td>",
"</tr>")
}
# assemble html table from rows
assemble_html_table <- function(html_rows) {
if(length(html_rows) == 0) return(NA)
header <- "<tr><th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Date</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Time</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Position</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Age.Grade</th></tr>"
full_table <- paste0("<table style='border-collapse: collapse;'>", header, html_rows, "</table>")
return(full_table)
}
# LOAD DATA
data <- read.csv(paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
group_by(Event, .add = TRUE) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
# DATA FOR TABLES
data <- data[complete.cases(data),]
# TIMELINE PLOT
timeline_event_grade <- ggplot(data) +
geom_point(
aes(x = Date, y = inMinutes, color=round(Age.Grade), shape=Event),
size =2.2) +
# SCALES
scale_color_binned("Age.Grade",type="viridis")+
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(n.breaks = 7) +
# ANNOTATIONS
annotate("rect", xmin = as.Date("2019-12-31"), xmax = as.Date("2021-05-01"),
ymin = -Inf, ymax = Inf,
fill = "red", alpha = 0.2) +
annotate("rect", xmin = min(data$Date)-100, xmax = max(data$Date)+100, ymin = 17, ymax = 22,
alpha = .1,fill = "blue")+
annotate("text",
x=as.Date(c("2020-07-01","2022-01-01")),y=c(22.5,20),
label=c("Big-Flu time","Target time"),
size=2.5)+
labs(title = "Parkrun Times", x = "Date", y = "Minutes") +
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
View(mapdata)
View(data)
View(mapdata)
# to hour minutes seconds readable label
to_hhmmss <- function(seconds) {
total_seconds <- round(seconds)
hours <- total_seconds %/% 3600
mins <- (total_seconds %% 3600) %/% 60
secs <- total_seconds %% 60
# if there are hour values use them
if (hours > 0) {
return(sprintf("%02d:%02d:%02d", hours, mins, secs))
} else {
return(sprintf("%02d:%02d", mins, secs))
}
}
# for transparency when ran 0 times
funfillop <- function(x,naop,op) {
ifelse(is.na(x), naop, op)
}
# for no stroke when ran >= 1 time
funstroke <- function(x) {
ifelse(is.na(x),TRUE,FALSE)
}
# for popup table rows
generate_html_row <- function(Date, Time, Position, AgeGrade) {
paste0("<tr>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Date, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Time, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", Position, "</td>",
"<td style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>", AgeGrade, "</td>",
"</tr>")
}
# assemble html table from rows
assemble_html_table <- function(html_rows) {
if(length(html_rows) == 0) return(NA)
header <- "<tr><th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Date</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Time</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Position</th>
<th style='border: 1px solid black; text-align: center; padding-left: 5px; padding-right: 5px;'>Age.Grade</th></tr>"
full_table <- paste0("<table style='border-collapse: collapse;'>", header, html_rows, "</table>")
return(full_table)
}
# LOAD DATA
data <- read.csv(paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
View(data)
?group_by
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(html_rows = paste(html_row, collapse=""),
n = n(),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade))
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y)
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL)
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_rows=NULL)
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds, na.rm = TRUE),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL,html_rows=NULL)
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL,html_rows=NULL)
# COPY PASTE TABLE FROM WEB
data <- read.csv("C:/Users/ArturodelaCruz/OneDrive - London School of Hygiene and Tropical Medicine/Areas/RDrive/CruzAdl.github.io/rawdata/parkrun-res-pasted.csv")
# LOCS FROM JSON FILE IN OTHER SCRIPT
locs <- readRDS("C:/Users/ArturodelaCruz/OneDrive - London School of Hygiene and Tropical Medicine/Areas/RDrive/CruzAdl.github.io/rawdata/all-parkruns.RDS")
View(data)
View(locs)
parkruns <- data %>%
rowwise() %>%
dplyr::mutate(
Date = as_date(Run.Date, format="%d/%m/%Y"),Run.Date=NULL,Run.Number=NULL,
Position =Pos,Pos = NULL,
inMinutes = round(as.numeric(sapply(strsplit(Time, ":"), function(x) x[1])) + as.numeric(sapply(strsplit(Time, ":"), function(x) x[2])) / 60,2),
inSeconds = as.numeric(substr(Time, 1, 2)) * 60 + as.numeric(substr(Time, 4, 5)),
PB = if_else(PB=="PB",1,0),
Age.Grade=as.numeric(str_remove(Age.Grade,"%"))) %>%
dplyr::left_join(., locs, "Event") %>%
dplyr::select(Event,Date,Time,inMinutes,inSeconds,Position,Age.Grade,X=x,Y=y) %>%
ungroup()
librarian::shelf(dplyr,data.table, lubridate, stringr, sf)
parkruns <- data %>%
rowwise() %>%
dplyr::mutate(
Date = as_date(Run.Date, format="%d/%m/%Y"),Run.Date=NULL,Run.Number=NULL,
Position =Pos,Pos = NULL,
inMinutes = round(as.numeric(sapply(strsplit(Time, ":"), function(x) x[1])) + as.numeric(sapply(strsplit(Time, ":"), function(x) x[2])) / 60,2),
inSeconds = as.numeric(substr(Time, 1, 2)) * 60 + as.numeric(substr(Time, 4, 5)),
PB = if_else(PB=="PB",1,0),
Age.Grade=as.numeric(str_remove(Age.Grade,"%"))) %>%
dplyr::left_join(., locs, "Event") %>%
dplyr::select(Event,Date,Time,inMinutes,inSeconds,Position,Age.Grade,X=x,Y=y) %>%
ungroup()
View(parkruns)
View(parkruns)
# also show events at a buffer from my home parkrun
home_parkrun_xy <- locs[locs$Event=="Lordship Recreation Ground",] %>% st_transform(.,27700)
ep <- st_transform(locs,27700)
d <- 20000
near_parkruns <- ep[st_distance(ep,home_parkrun_xy)<= units::set_units(d, "m"),] %>%
dplyr::select(Event, X=x,Y=y) %>% st_drop_geometry(.)
mapdata <-full_join(parkruns,near_parkruns)
View(mapdata)
# SAVE FOR MAP
data.table::fwrite(mapdata,paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
# LOAD DATA
data <- read.csv(paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n = n(), n= ifelse(is.na(inSeconds),0,n),
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL,html_rows=NULL)
# DATA FOR TABLES
data <- data[complete.cases(data),]
# TIMELINE PLOT
timeline_event_grade <- ggplot(data) +
geom_point(
aes(x = Date, y = inMinutes, color=round(Age.Grade), shape=Event),
size =2.2) +
# SCALES
scale_color_binned("Age.Grade",type="viridis")+
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(n.breaks = 7) +
# ANNOTATIONS
annotate("rect", xmin = as.Date("2019-12-31"), xmax = as.Date("2021-05-01"),
ymin = -Inf, ymax = Inf,
fill = "red", alpha = 0.2) +
annotate("rect", xmin = min(data$Date)-100, xmax = max(data$Date)+100, ymin = 17, ymax = 22,
alpha = .1,fill = "blue")+
annotate("text",
x=as.Date(c("2020-07-01","2022-01-01")),y=c(22.5,20),
label=c("Big-Flu time","Target time"),
size=2.5)+
labs(title = "Parkrun Times", x = "Date", y = "Minutes") +
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
timeline_event_grade <- ggplot(data) +
geom_point(
aes(x = Date, y = inMinutes, color=round(Age.Grade), shape=Event),
size =2.2)
timeline_event_grade <- ggplot(data) +
geom_point(
aes(x = Date, y = inMinutes, color=round(Age.Grade), shape=Event),
size =2.2) +
# SCALES
scale_color_binned("Age.Grade",type="viridis")+
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(n.breaks = 7)
data
View(data)
min(data$Date)
timeline_event_grade <- ggplot(data) +
geom_point(
aes(x = Date, y = inMinutes, color=round(Age.Grade), shape=Event),
size =2.2) +
# SCALES
scale_color_binned("Age.Grade",type="viridis")+
scale_x_date(date_breaks = "1 year", date_labels = "%Y") +
scale_y_continuous(n.breaks = 7) +
# ANNOTATIONS
annotate("rect", xmin = as.Date("2019-12-31"), xmax = as.Date("2021-05-01"),
ymin = -Inf, ymax = Inf,
fill = "red", alpha = 0.2)
timeline_event_grade
data <- read.csv(paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
data <- data %>% group_by(Event) %>%
mutate(Date=as.Date(Date),
n = n(), n= ifelse(is.na(Date),0,n))
View(data)
data <- data %>% group_by(Event) %>%
mutate(Date=as.Date(Date),
n = n(), n= ifelse(is.na(Date),0,n)) %>%
ungroup(.)
# LOAD DATA
data <- read.csv(paste0(here(),"/rawdata/my_parkruns_mapdata.csv"))
data <- data %>% group_by(Event) %>%
mutate(Date=as.Date(Date),
n = n(), n= ifelse(is.na(Date),0,n)) %>%
ungroup(.)
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n,
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL,html_rows=NULL)
# DATA FOR MAP
mapdata <- data %>%
group_by(Event) %>%
arrange(Date) %>%
mutate(html_row = generate_html_row(Date, Time, Position, Age.Grade)) %>%
reframe(n,
html_rows = paste(html_row, collapse=""),
inSeconds = mean(inSeconds),
X,
Y) %>%
mutate(pop_lbl = ifelse(n > 0, assemble_html_table(html_rows), NA),
html_row=NULL,html_rows=NULL) %>%
distinct(.)
# Run the application
run_app()
# Document and reload your package
golem::document_and_reload()
pkgload::load_all()
setwd("C:/Users/ArturodelaCruz/OneDrive - London School of Hygiene and Tropical Medicine/Areas/RDrive/hipmapp")
# Document and reload your package
golem::document_and_reload()
?awesomeRadio
load("C:/Users/ArturodelaCruz/OneDrive - London School of Hygiene and Tropical Medicine/Areas/RDrive/hipmapp/R/sysdata.rda")
sc_opts
datamode_opts
range_opts
ssp_opts
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Run checks ----
## Check the package before sending to prod
devtools::check()
## RStudio ----
## If you want to deploy on RStudio related platforms
options(rsconnect.packrat=TRUE)
golem::add_shinyappsio_file()
# Deploy to Posit Connect or ShinyApps.io
# In command line.
rsconnect::deployApp(
appName = desc::desc_get_field("Package"),
appTitle = desc::desc_get_field("Package"),
appFiles = c(
# Add any additional files unique to your app here.
"R/",
"inst/",
#"data/",
"NAMESPACE",
"DESCRIPTION",
"app.R"
),
appId = rsconnect::deployments(".")$appID,
lint = FALSE,
forceUpdate = TRUE,
account="ehm-lab"
)
